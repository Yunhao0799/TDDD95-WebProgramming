///////////////////////////// Token protection /////////////////////////////
// 1. Create blob
var blob = "";
for(let i = 0; i < oldPswd.length; i+=3)
  blob += oldPswd[i];

for(let i = 0; i < newPswd.length; i+=3)
  blob += newPswd[i];

token += blob;

// 2. Hash the blob
var shaObj = new jsSHA("SHA-256", "TEXT");
shaObj.update(token);
token = shaObj.getHash("HEX");
console.log(token);
////////////////////////////////////////////////////////////////////////////














equal_hashed_token = False

########################## Token verification ##########################
# 1. Recreate the blob using the stored token
blob = ""
i = 0
while i < len(old_password):
    blob = blob + old_password[i]
    i = i + 3

print("blob oldPswd: " + blob)

i = 0
while i < len(new_password):
    blob = blob + new_password[i]
    i = i + 3

print("blob newPswd: " + blob)

blob = stored_token + blob

print("blob: " + blob)
# 2. Hash it
hash = hashlib.sha256(blob.encode()).hexdigest()
print(hash)

# 3. Compare the two hashes
if token == hash:
    equal_hashed_token = True

print(equal_hashed_token)
########################################################################


else:
        
        return jsonify({'success' : False, 'message' : "The hashes is not the same"})
